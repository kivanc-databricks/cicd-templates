variables:
- group: Databricks-environment

trigger:
  batch: true
  branches:
    include:
    - '*'

  tags:
    include:
      - v*.*
      - prod

stages:
- stage: onPush
  condition: |
    and(
       not(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases')),
       not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  jobs:
  - job: onPushJob
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.7'
      inputs:
        versionSpec: 3.7

    - checkout: self
      persistCredentials: true
      clean: true
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

    - script: |
        python -m pip install --upgrade pip
        pip install -r unit-requirements.txt
        pip install -e .
      displayName: 'Install dependencies'

    - script: |
        pytest tests/unit --junitxml=test-unit.xml
      displayName: 'Run Unit tests'

    - script: |
        set -x
        echo "Checking out the $(Build.SourceBranchName) branch"
        curl -s -n -X GET -o /tmp/staging-repo-info.json "$DATABRICKS_HOST/api/2.0/workspace/get-status" -H "Authorization: Bearer $DATABRICKS_TOKEN" -d '{"path":"/Repos/Staging/{{cookiecutter.project_name}}"}'
        cat /tmp/staging-repo-info.json
        export STAGING_REPOS_ID=$(cat /tmp/staging-repo-info.json|grep '"object_type":"REPO"'|sed -e 's|^.*"object_id":\([0-9]*\).*$|\1|')
        curl -s -n -X PATCH -o "/tmp/$(Build.SourceBranchName)-out.json" "$DATABRICKS_HOST/api/2.0/repos/$STAGING_REPOS_ID" \
          -H "Authorization: Bearer $DATABRICKS_TOKEN" -d "{\"branch\": \"$(Build.SourceBranchName)\"}"
        cat "/tmp/$(Build.SourceBranchName)-out.json"
        grep -v error_code "/tmp/$(Build.SourceBranchName)-out.json"
      env:
        DATABRICKS_HOST: $(STAGING_DATABRICKS_HOST)
        DATABRICKS_TOKEN: $(STAGING_DATABRICKS_TOKEN)
      displayName: 'Update Staging project'
      condition: and(succeeded(),not(startsWith(variables['Build.SourceBranch'], 'refs/pull')))

      #    - script: |
#        dbx deploy --notebook={{cookiecutter.project_name}}-sample-integration-test --files-only
#      displayName: 'Deploy integration test'
#      env:
#        DATABRICKS_HOST: $(STAGING_DATABRICKS_HOST)
#        DATABRICKS_TOKEN: $(STAGING_DATABRICKS_TOKEN)
#
#    - script: |
#        dbx launch --job={{cookiecutter.project_name}}-sample-integration-test --as-run-submit --trace
#      displayName: 'Launch integration on test'
#      env:
#        DATABRICKS_HOST: $(STAGING_DATABRICKS_HOST)
#        DATABRICKS_TOKEN: $(STAGING_DATABRICKS_TOKEN)

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-*.xml'
        failTaskOnFailedTests: true

- stage: onRelease
  condition: |
    or(
      startsWith(variables['Build.SourceBranch'], 'refs/heads/releases'),
      startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
    )
  jobs:
  - job: onReleaseJob
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
      - script: env | sort
        displayName: 'Environment / Context'

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.7'
        inputs:
          versionSpec: 3.7

      - checkout: self
        persistCredentials: true
        clean: true
        displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

      - script: |
          python -m pip install --upgrade pip
          pip install -r unit-requirements.txt
          pip install -e .
        displayName: 'Install dependencies'

      - script: |
          pytest tests/unit --junitxml=test-unit.xml
        displayName: 'Run Unit tests'

      - script: |
          set -x
          echo "Checking out the master branch"
          curl -s -n -X GET -o /tmp/prod-repo-info.json "$DATABRICKS_HOST/api/2.0/workspace/get-status" -H "Authorization: Bearer $DATABRICKS_TOKEN" -d '{"path":"/Repos/Production/{{cookiecutter.project_name}}"}'
          cat /tmp/prod-repo-info.json
          export PRODUCTION_REPOS_ID=$(cat /tmp/prod-repo-info.json|grep '"object_type":"REPO"'|sed -e 's|^.*"object_id":\([0-9]*\).*$|\1|')
          curl -s -n -X PATCH -o "/tmp/master-out.json" "$DATABRICKS_HOST/api/2.0/repos/$PRODUCTION_REPOS_ID" \
            -H "Authorization: Bearer $DATABRICKS_TOKEN" -d "{\"branch\": \"main\"}"
          cat "/tmp/master-out.json"
          grep -v error_code "/tmp/master-out.json"
        env:
          DATABRICKS_HOST: $(PROD_DATABRICKS_HOST)
          DATABRICKS_TOKEN: $(PROD_DATABRICKS_TOKEN)
        displayName: 'Update Production repository'

      - script: |
          dbx deploy --jobs={{cookiecutter.project_name}}-sample
        displayName: 'Deploy the job'
        env:
          DATABRICKS_HOST: $(PROD_DATABRICKS_HOST)
          DATABRICKS_TOKEN: $(PROD_DATABRICKS_TOKEN)

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/test-*.xml'
          failTaskOnFailedTests: true
